<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #3b82f6;
            --primary-hover: #2563eb;
            --secondary-color: #64748b;
            --accent-color: #8b5cf6;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --dark-bg: #1e293b;
            --light-bg: #f8fafc;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 2rem;
        }

        .dashboard-container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 24px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
            padding: 3rem;
            animation: slideUp 0.8s ease-out;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .section-title {
            font-size: 2.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-align: center;
            margin-bottom: 3rem;
            position: relative;
        }

        .section-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 4px;
            background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
            border-radius: 2px;
        }

        .welcome-text {
            text-align: center;
            margin-bottom: 3rem;
            font-size: 1.2rem;
            color: var(--secondary-color);
            font-weight: 500;
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }

        .feature-card {
            background: linear-gradient(145deg, #ffffff, #f8fafc);
            border-radius: 20px;
            padding: 2.5rem;
            text-align: center;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            border: 1px solid rgba(255, 255, 255, 0.2);
            position: relative;
            overflow: hidden;
            cursor: pointer;
        }

        .feature-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            transition: left 0.6s;
        }

        .feature-card:hover::before {
            left: 100%;
        }

        .feature-card:hover {
            transform: translateY(-15px) scale(1.02);
            box-shadow: 0 30px 60px rgba(0, 0, 0, 0.2);
            border-color: var(--primary-color);
        }

        .feature-icon {
            width: 80px;
            height: 80px;
            margin: 0 auto 1.5rem;
            background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            color: white;
            transition: all 0.3s ease;
            position: relative;
            z-index: 2;
        }

        .feature-card:hover .feature-icon {
            transform: rotate(360deg) scale(1.1);
            box-shadow: 0 15px 30px rgba(59, 130, 246, 0.4);
        }

        .feature-card h3 {
            font-size: 1.5rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 1rem;
            position: relative;
            z-index: 2;
        }

        .feature-card p {
            color: var(--secondary-color);
            margin-bottom: 1.5rem;
            line-height: 1.6;
            position: relative;
            z-index: 2;
        }

        .btn {
            display: inline-block;
            padding: 0.875rem 2rem;
            background: linear-gradient(135deg, var(--primary-color), var(--primary-hover));
            color: white;
            text-decoration: none;
            border-radius: 50px;
            font-weight: 600;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            font-size: 1rem;
            position: relative;
            overflow: hidden;
            z-index: 2;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, var(--accent-color), var(--primary-color));
            transition: left 0.3s ease;
            z-index: -1;
        }

        .btn:hover::before {
            left: 0;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 15px 30px rgba(59, 130, 246, 0.4);
        }

        .btn:active {
            transform: translateY(0);
        }

        /* Stats counter animation */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 1.5rem;
            border-radius: 16px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        /* Responsive design */
        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }
            
            .dashboard-container {
                padding: 2rem;
            }
            
            .section-title {
                font-size: 2rem;
            }
            
            .features-grid {
                grid-template-columns: 1fr;
                gap: 1.5rem;
            }
            
            .feature-card {
                padding: 2rem;
            }
        }

        /* Loading animation */
        .loading {
            opacity: 0.7;
            pointer-events: none;
        }

        .loading .feature-icon {
            animation: pulse 1.5s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <section class="content-section">
            <h2 class="section-title">Dashboard</h2>
            <div class="welcome-text">
                <p>Welcome back, <span id="username">User</span>! ðŸ‘‹</p>
                <p class="text-sm mt-2 opacity-75">Ready to create something amazing today?</p>
            </div>

            <!-- Stats Grid -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="postCount">12</div>
                    <div class="stat-label">Total Posts</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="viewCount">1.2K</div>
                    <div class="stat-label">Total Views</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="draftCount">3</div>
                    <div class="stat-label">Draft Posts</div>
                </div>
            </div>

            <div class="features-grid">
                <div class="feature-card" data-feature="create">
                    <div class="feature-icon">
                        <i class="fas fa-plus"></i>
                    </div>
                    <h3>Create New Post</h3>
                    <p>Start writing your next blog post with our intuitive editor</p>
                    <button class="btn" onclick="navigateTo('/create-post')">Create Post</button>
                </div>
                
                <div class="feature-card" data-feature="manage">
                    <div class="feature-icon">
                        <i class="fas fa-list"></i>
                    </div>
                    <h3>Manage Posts</h3>
                    <p>Edit, organize and manage your existing posts efficiently</p>
                    <button class="btn" onclick="navigateTo('/manage-posts')">Manage Posts</button>
                </div>
                
                <div class="feature-card" data-feature="settings">
                    <div class="feature-icon">
                        <i class="fas fa-user-cog"></i>
                    </div>
                    <h3>Account Settings</h3>
                    <p>Update your profile, preferences and account security</p>
                    <button class="btn" onclick="navigateTo('/settings')">Settings</button>
                </div>
            </div>
        </section>
    </div>

    <script>
        // Dashboard JavaScript functionality
        class Dashboard {
            constructor() {
                this.init();
                this.bindEvents();
                this.animateStats();
            }

            init() {
                // Set username (could be from localStorage or API)
                this.setUsername();
                
                // Add loading states
                this.setupLoadingStates();
                
                // Initialize tooltips
                this.initTooltips();
            }

            setUsername() {
                const username = localStorage.getItem('username') || 'Creative Writer';
                document.getElementById('username').textContent = username;
            }

            bindEvents() {
                // Add click events to feature cards
                const featureCards = document.querySelectorAll('.feature-card');
                featureCards.forEach(card => {
                    card.addEventListener('click', this.handleCardClick.bind(this));
                    card.addEventListener('mouseenter', this.handleCardHover.bind(this));
                });

                // Add keyboard navigation
                document.addEventListener('keydown', this.handleKeyNavigation.bind(this));
            }

            handleCardClick(event) {
                const card = event.currentTarget;
                const feature = card.dataset.feature;
                
                // Add click animation
                card.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    card.style.transform = '';
                }, 150);

                // Trigger button click if not clicked directly
                if (!event.target.classList.contains('btn')) {
                    const button = card.querySelector('.btn');
                    if (button) {
                        button.click();
                    }
                }
            }

            handleCardHover(event) {
                const card = event.currentTarget;
                const icon = card.querySelector('.feature-icon i');
                
                // Add subtle icon animation on hover
                icon.style.transform = 'scale(1.1)';
                setTimeout(() => {
                    icon.style.transform = '';
                }, 300);
            }

            handleKeyNavigation(event) {
                if (event.key === 'Enter' && event.target.classList.contains('feature-card')) {
                    event.target.click();
                }
            }

            setupLoadingStates() {
                // Simulate loading for demonstration
                const cards = document.querySelectorAll('.feature-card');
                cards.forEach((card, index) => {
                    card.style.opacity = '0';
                    card.style.transform = 'translateY(30px)';
                    
                    setTimeout(() => {
                        card.style.transition = 'all 0.6s ease';
                        card.style.opacity = '1';
                        card.style.transform = 'translateY(0)';
                    }, index * 200);
                });
            }

            animateStats() {
                // Animate stat numbers
                this.animateNumber('postCount', 12, 2000);
                this.animateNumber('viewCount', 1200, 2500, (num) => {
                    return num >= 1000 ? (num/1000).toFixed(1) + 'K' : num.toString();
                });
                this.animateNumber('draftCount', 3, 1500);
            }

            animateNumber(elementId, targetValue, duration, formatter = null) {
                const element = document.getElementById(elementId);
                const startValue = 0;
                const startTime = performance.now();

                const animate = (currentTime) => {
                    const elapsed = currentTime - startTime;
                    const progress = Math.min(elapsed / duration, 1);
                    
                    // Easing function
                    const easeOut = 1 - Math.pow(1 - progress, 3);
                    const currentValue = Math.floor(startValue + (targetValue - startValue) * easeOut);
                    
                    element.textContent = formatter ? formatter(currentValue) : currentValue;
                    
                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    }
                };
                
                requestAnimationFrame(animate);
            }

            initTooltips() {
                // Simple tooltip implementation
                const buttons = document.querySelectorAll('.btn');
                buttons.forEach(btn => {
                    btn.addEventListener('mouseenter', (e) => {
                        const tooltip = document.createElement('div');
                        tooltip.className = 'tooltip';
                        tooltip.textContent = 'Click to navigate';
                        tooltip.style.cssText = `
                            position: absolute;
                            background: rgba(0,0,0,0.8);
                            color: white;
                            padding: 0.5rem;
                            border-radius: 4px;
                            font-size: 0.8rem;
                            pointer-events: none;
                            z-index: 1000;
                            opacity: 0;
                            transition: opacity 0.3s;
                        `;
                        document.body.appendChild(tooltip);
                        
                        const rect = e.target.getBoundingClientRect();
                        tooltip.style.left = rect.left + 'px';
                        tooltip.style.top = (rect.top - 40) + 'px';
                        
                        setTimeout(() => tooltip.style.opacity = '1', 10);
                        
                        e.target.addEventListener('mouseleave', () => {
                            tooltip.remove();
                        }, { once: true });
                    });
                });
            }
        }

        // Navigation function
        function navigateTo(path) {
            // Add loading state
            const clickedCard = event.target.closest('.feature-card');
            if (clickedCard) {
                clickedCard.classList.add('loading');
            }

            // Simulate navigation delay
            setTimeout(() => {
                // In a real app, you would use a router here
                console.log(`Navigating to: ${path}`);
                alert(`Would navigate to: ${path}\n\nIn a real application, this would redirect to the appropriate page.`);
                
                // Remove loading state
                if (clickedCard) {
                    clickedCard.classList.remove('loading');
                }
            }, 800);
        }

        // Utility functions
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.textContent = message;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 1rem 1.5rem;
                border-radius: 8px;
                color: white;
                font-weight: 500;
                z-index: 1000;
                opacity: 0;
                transform: translateX(100%);
                transition: all 0.3s ease;
                background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.opacity = '1';
                notification.style.transform = 'translateX(0)';
            }, 10);
            
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // Initialize dashboard when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            new Dashboard();
            
            // Show welcome notification
            setTimeout(() => {
                showNotification('Dashboard loaded successfully!', 'success');
            }, 1000);
        });

        // Handle page visibility changes
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden) {
                // Refresh stats when page becomes visible
                const dashboard = new Dashboard();
                dashboard.animateStats();
            }
        });
    </script>
</body>
</html>